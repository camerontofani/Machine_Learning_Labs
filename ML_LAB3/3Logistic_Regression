{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"56rggEp6-NXI","executionInfo":{"status":"ok","timestamp":1747001711274,"user_tz":300,"elapsed":6,"user":{"displayName":"Cameron Tofani","userId":"01633329118435236785"}}},"outputs":[],"source":["#link to the dataset\n","#https://archive.ics.uci.edu/dataset/544/estimation+of+obesity+levels+based+on+eating+habits+and+physical+condition"]},{"cell_type":"markdown","source":["**1. Preparation and Overview**"],"metadata":{"id":"WptAzR9gI4S4"}},{"cell_type":"markdown","source":["**[2 points] Explain the task and what business-case or use-case it is designed to solve (or designed to investigate). Detail exactly what the classification task is and what parties would be interested in the results. For example, would the model be deployed or used mostly for offline analysis? As in previous labs, also detail how good the classifier needs to perform in order to be useful.**\n","\n","Answer: The goal of this dataset is to classify individuals into classes of obesity based on their physical state, personal eating habits, family history, etc. This is a multiclass classification because it classifies individuals as Insufficient Weight, Normal Weight, Overweight Level I, Overweight Level II, Obesity Type I, Obesity Type II, and Obesity Type III. For ease and simplicity, we may end up altering the dataset to just classify as \"overweight\" and \"obese\" instead of spesifying the levels. Doing this will reduce the amount of classes that our classifier will use, which will hopefully make it more accurate.\n","\n","Obesity classification is important for businesses like healthcare professionals, nutritionists, doctors, or perhaps even policy makers or administrations like the FDA. Healthcare providers coud use this model to identify high-risk individuals and provide them with help early on. Government/health officials could track obesity trends and implement targeted health campaigns. Doctors could analyze the features discussed in this model and have it detemine if their patient is of normal weight or not.\n","\n","In terms of deployment, this model could be used in health screening applications for offline analysis as well. It could also be integrated into mobile health apps for personal assesment of obesity. For example, an application could ask for your information (gender, weight, meals a day, etc.), and use this classifier to predict your weight classification.\n","\n","We think in order for this classification model to be useful it should have a high accuracy, preferably over 85%, to be considered useful for the cases described above.\n","\n","\n","ADDITIONS/CORRECTIONS:\n","\n","To be useful in real healthcare or app settings, the model should be accurate enough to give reliable classifications without causing false alarms or missed warnings. An accuracy of 85% or higher is a common benchmark in health-related classification tasks, since lower accuracy could lead to users being misclassified and possibly ignoring serious health risks. While we did not base our exact threshold on a formal study, it reflects a balance between precision and usability in real-world applications like early screening or personal health apps. 85% is enough to be right most of the time, with a small error that could be expected when using an app for personal assessment.\n"],"metadata":{"id":"FFXLcXbfI7iY"}},{"cell_type":"code","source":["from google.colab import drive\n","import pandas as pd\n","\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DYqJVQlSMkJl","executionInfo":{"status":"ok","timestamp":1747001730194,"user_tz":300,"elapsed":18902,"user":{"displayName":"Cameron Tofani","userId":"01633329118435236785"}},"outputId":"460c3a6b-e9d1-4489-8a1d-c38a4dd6395e"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"markdown","source":["[.5 points] (mostly the same processes as from previous labs) Define and prepare your class variables. Use proper variable representations (int, float, one-hot, etc.). Use pre-processing methods (as needed) for dimensionality reduction, scaling, etc. Remove variables that are not needed/useful for the analysis (give reasoning). Describe the final dataset that is used for classification/regression (include a description of any newly formed variables you created). Provide a breakdown of the variables after preprocessing (such as the mean, std, etc. for all variables, including numeric and categorical).\n","\n","**Answer:**\n","**Define class variables--**\n","Gender (one-hot encoded: Male = [1,0], Female = [0,1]) – Categorical variable indicating the individual’s gender.\n","Age (float) – Continuous variable representing the individual's age in years.\n","Height (float) – Continuous variable representing the individual's height in meters.\n","Weight (float) – Continuous variable representing the individual's weight in kilograms.\n","family_history_with_overweight (binary: 1 = Yes, 0 = No) – Indicates if the individual has a family history of overweight/obesity.\n","FAVC (binary: 1 = Yes, 0 = No) – Indicates if the individual frequently eats high-calorie food.\n","FCVC (int: 1 to 3) – Ordinal variable representing the frequency of vegetable consumption (1 = Low, 2 = Medium, 3 = High).\n","NCP (float) – Continuous variable representing the number of main meals the individual eats daily.\n","CAEC (one-hot encoded: No, Sometimes, Frequently, Always) – Categorical variable representing snacking frequency.\n","SMOKE (binary: 1 = Yes, 0 = No) – Indicates whether the individual smokes.\n","CH2O (float) – Continuous variable representing the individual's daily water intake in liters.\n","SCC (binary: 1 = Yes, 0 = No) – Indicates whether the individual monitors their calorie intake.\n","FAF (float) – Continuous variable representing how often the individual engages in physical activity.\n","TUE (int: 0 to 2) – Ordinal variable representing time spent using technology daily (0 = None, 1 = Moderate, 2 = High).\n","CALC (one-hot encoded: No, Sometimes, Frequently, Always) – Categorical variable representing alcohol consumption frequency.\n","MTRANS (one-hot encoded: Automobile, Motorbike, Bike, Public_Transportation, Walking) – Categorical variable representing the primary mode of transportation.\n","NObesity (label-encoded: 0 to 6 or one-hot encoded depending on model choice) – Multi-class target variable representing the obesity level classification.\n","\n","\n","**Remove unnecessary variables and give reasoning--**\n","\n","CH2O (Water Intake)\t-> While hydration is important, its impact on obesity might be minimal compared to direct factors like diet and exercise.\n","\n","CAEC (Food Between Meals)-> Most responses say \"Sometimes\", so this variable lacks variation (not useful for prediction).\n","\n","SMOKE (Smoking Habit)\tSmoking can influence metabolism, but it's a weak obesity predictor.\n","\n","SCC (Calorie Monitoring) -> Most people probably don't actively monitor calories, leading to little variation.\n","\n","TUE (Time Using Technology Devices)\tIf correlated with physical activity (FAF), it may be redundant.\n","\n","CALC (Alcohol Consumption)\tWhile alcohol can contribute to weight gain, it may not be as strong a predictor as food and exercise.\n","\n","MTRANS (Transportation Mode)\tWalking might be useful, but overall, transport mode doesn't directly determine obesity.\n","\n","\n","**Describe final dataset (including description of newly formed variables)---**\n","Total Variables: 10 (9 features + 1 target variable)\n","Mix of Data Types:\n","Categorical Variables (one-hot encoded): Gender\n","Binary Variables: Family history with overweight, FAVC\n","Ordinal Variables: FCVC\n","Continuous Variables: Age, Height, Weight, NCP, FAF\n","Target Variable: NObesity (multi-class classification task)\n","\n","**Provide breakdown after preprocessing (summary of mean, std, etc.)**\n","* Summary statistics seen in code below"],"metadata":{"id":"1RrePh_fOf2y"}},{"cell_type":"code","source":["file_path = \"/content/drive/My Drive/Colab Notebooks/ML/ML_LAB3/ObesityDataSet_raw_and_data_sinthetic.csv\"\n","df = pd.read_csv(file_path)\n","\n","# Check if it's loaded properly\n","print(df.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4IeZyHzFNC9f","executionInfo":{"status":"ok","timestamp":1747001744954,"user_tz":300,"elapsed":776,"user":{"displayName":"Cameron Tofani","userId":"01633329118435236785"}},"outputId":"929d7039-c9b9-405d-f20b-f19b07911804"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["   Gender   Age  Height  Weight family_history_with_overweight FAVC  FCVC  \\\n","0  Female  21.0    1.62    64.0                            yes   no   2.0   \n","1  Female  21.0    1.52    56.0                            yes   no   3.0   \n","2    Male  23.0    1.80    77.0                            yes   no   2.0   \n","3    Male  27.0    1.80    87.0                             no   no   3.0   \n","4    Male  22.0    1.78    89.8                             no   no   2.0   \n","\n","   NCP       CAEC SMOKE  CH2O  SCC  FAF  TUE        CALC  \\\n","0  3.0  Sometimes    no   2.0   no  0.0  1.0          no   \n","1  3.0  Sometimes   yes   3.0  yes  3.0  0.0   Sometimes   \n","2  3.0  Sometimes    no   2.0   no  2.0  1.0  Frequently   \n","3  3.0  Sometimes    no   2.0   no  2.0  0.0  Frequently   \n","4  1.0  Sometimes    no   2.0   no  0.0  0.0   Sometimes   \n","\n","                  MTRANS           NObeyesdad  \n","0  Public_Transportation        Normal_Weight  \n","1  Public_Transportation        Normal_Weight  \n","2  Public_Transportation        Normal_Weight  \n","3                Walking   Overweight_Level_I  \n","4  Public_Transportation  Overweight_Level_II  \n"]}]},{"cell_type":"code","source":["#dropping the variables we dont want(explanation above)\n","unwanted_features = [\"CH2O\", \"CAEC\", \"SMOKE\", \"SCC\", \"TUE\", \"CALC\", \"MTRANS\"]\n","df = df.drop(columns=unwanted_features)\n","\n","#viewing new dataset with columns removed\n","print(\"First few rows of the dataset after feature selection:\")\n","print(df.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e5PavT7eQepD","executionInfo":{"status":"ok","timestamp":1747001751016,"user_tz":300,"elapsed":48,"user":{"displayName":"Cameron Tofani","userId":"01633329118435236785"}},"outputId":"07cb3a8d-33e3-480b-c107-bcdc2c0e738e"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["First few rows of the dataset after feature selection:\n","   Gender   Age  Height  Weight family_history_with_overweight FAVC  FCVC  \\\n","0  Female  21.0    1.62    64.0                            yes   no   2.0   \n","1  Female  21.0    1.52    56.0                            yes   no   3.0   \n","2    Male  23.0    1.80    77.0                            yes   no   2.0   \n","3    Male  27.0    1.80    87.0                             no   no   3.0   \n","4    Male  22.0    1.78    89.8                             no   no   2.0   \n","\n","   NCP  FAF           NObeyesdad  \n","0  3.0  0.0        Normal_Weight  \n","1  3.0  3.0        Normal_Weight  \n","2  3.0  2.0        Normal_Weight  \n","3  3.0  2.0   Overweight_Level_I  \n","4  1.0  0.0  Overweight_Level_II  \n"]}]},{"cell_type":"code","source":["# we want to rename some of the columns for clarity\n","\n","rename_dict = {\n","    \"family_history_with_overweight\": \"fam_history\",\n","    \"FAVC\": \"high_cal_foods\",\n","    \"FCVC\": \"num_veg\",\n","    \"NCP\": \"meals_daily\",\n","    \"FAF\": \"activity\",\n","    \"NObeyesdad\": \"obesity_level\"\n","}\n","df = df.rename(columns=rename_dict)\n","\n","#view after these changes\n","print(\"First few rows of the dataset after feature selection and renaming:\")\n","print(df.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SrjTOGDdRk7L","executionInfo":{"status":"ok","timestamp":1747001751019,"user_tz":300,"elapsed":4,"user":{"displayName":"Cameron Tofani","userId":"01633329118435236785"}},"outputId":"39496dd5-aedd-48f8-8460-23a05938c101"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["First few rows of the dataset after feature selection and renaming:\n","   Gender   Age  Height  Weight fam_history high_cal_foods  num_veg  \\\n","0  Female  21.0    1.62    64.0         yes             no      2.0   \n","1  Female  21.0    1.52    56.0         yes             no      3.0   \n","2    Male  23.0    1.80    77.0         yes             no      2.0   \n","3    Male  27.0    1.80    87.0          no             no      3.0   \n","4    Male  22.0    1.78    89.8          no             no      2.0   \n","\n","   meals_daily  activity        obesity_level  \n","0          3.0       0.0        Normal_Weight  \n","1          3.0       3.0        Normal_Weight  \n","2          3.0       2.0        Normal_Weight  \n","3          3.0       2.0   Overweight_Level_I  \n","4          1.0       0.0  Overweight_Level_II  \n"]}]},{"cell_type":"code","source":["#we also want to group all overweight into one category, and all obese into one category\n","#this will reduce the amount of categories we are classifying into, will make OVA more simple\n","category_map = {\n","    \"Insufficient_Weight\": \"Underweight\",\n","    \"Normal_Weight\": \"Normal\",\n","    \"Overweight_Level_I\": \"Overweight\",\n","    \"Overweight_Level_II\": \"Overweight\",\n","    \"Obesity_Type_I\": \"Obese\",\n","    \"Obesity_Type_II\": \"Obese\",\n","    \"Obesity_Type_III\": \"Obese\"\n","}\n","\n","df[\"obesity_level\"] = df[\"obesity_level\"].map(category_map)\n","\n","print(df[\"obesity_level\"].value_counts())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j1VdA21y_tSq","executionInfo":{"status":"ok","timestamp":1747001751021,"user_tz":300,"elapsed":1,"user":{"displayName":"Cameron Tofani","userId":"01633329118435236785"}},"outputId":"c2f00e2e-46ff-4def-fd88-540bc886e726"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["obesity_level\n","Obese          972\n","Overweight     580\n","Normal         287\n","Underweight    272\n","Name: count, dtype: int64\n"]}]},{"cell_type":"code","source":["#Breakdown after preprocessing\n","\n","import numpy as np\n","\n","print(\"\\nData Types:\")\n","print(df.dtypes)\n","\n","#identify numerical and categorical variables\n","numeric_features = [\"Age\", \"Height\", \"Weight\", \"num_veg\", \"meals_daily\", \"activity\"]\n","categorical_features = [\"Gender\", \"fam_history\", \"high_cal_foods\"]\n","\n","target_variable = \"obesity_level\"\n","\n","#look at distribtion\n","print(\"\\nClass Distribution:\")\n","print(df[target_variable].value_counts())\n","\n","# **Summary of Processed Data**\n","print(\"\\nSummary Statistics for Numerical Variables:\")\n","print(df[numeric_features].describe())\n","\n","print(\"\\nValue Counts for Categorical Variables:\")\n","for col in categorical_features:\n","    print(f\"\\n{col}:\")\n","    print(df[col].value_counts())"],"metadata":{"id":"tsg6EEZ9ToVw","executionInfo":{"status":"ok","timestamp":1747001751052,"user_tz":300,"elapsed":31,"user":{"displayName":"Cameron Tofani","userId":"01633329118435236785"}},"outputId":"240feb80-904b-41f5-a72c-18f4c0054a5f","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Data Types:\n","Gender             object\n","Age               float64\n","Height            float64\n","Weight            float64\n","fam_history        object\n","high_cal_foods     object\n","num_veg           float64\n","meals_daily       float64\n","activity          float64\n","obesity_level      object\n","dtype: object\n","\n","Class Distribution:\n","obesity_level\n","Obese          972\n","Overweight     580\n","Normal         287\n","Underweight    272\n","Name: count, dtype: int64\n","\n","Summary Statistics for Numerical Variables:\n","               Age       Height       Weight      num_veg  meals_daily  \\\n","count  2111.000000  2111.000000  2111.000000  2111.000000  2111.000000   \n","mean     24.312600     1.701677    86.586058     2.419043     2.685628   \n","std       6.345968     0.093305    26.191172     0.533927     0.778039   \n","min      14.000000     1.450000    39.000000     1.000000     1.000000   \n","25%      19.947192     1.630000    65.473343     2.000000     2.658738   \n","50%      22.777890     1.700499    83.000000     2.385502     3.000000   \n","75%      26.000000     1.768464   107.430682     3.000000     3.000000   \n","max      61.000000     1.980000   173.000000     3.000000     4.000000   \n","\n","          activity  \n","count  2111.000000  \n","mean      1.010298  \n","std       0.850592  \n","min       0.000000  \n","25%       0.124505  \n","50%       1.000000  \n","75%       1.666678  \n","max       3.000000  \n","\n","Value Counts for Categorical Variables:\n","\n","Gender:\n","Gender\n","Male      1068\n","Female    1043\n","Name: count, dtype: int64\n","\n","fam_history:\n","fam_history\n","yes    1726\n","no      385\n","Name: count, dtype: int64\n","\n","high_cal_foods:\n","high_cal_foods\n","yes    1866\n","no      245\n","Name: count, dtype: int64\n"]}]},{"cell_type":"markdown","source":["[.5 points] Divide your data into training and testing splits using an 80% training and 20% testing split. Use the cross validation modules that are part of scikit-learn. Argue \"for\" or \"against\" splitting your data using an 80/20 split. That is, why is the 80/20 split appropriate (or not) for your dataset?  \n","\n","**Answer:** Given the multi-class nature of the dataset (various obesity levels), stratified sampling helps maintain class proportions in both training and testing sets. This proportion prevents overfitting (which could occur with too small a training set) and ensures generalization to unseen data. In medical and health-related models, generalization is crucial as the model should perform well on real-world cases, not just training data. A 90-10 split would not be sufficient because it would not have enough testing data and may not perform as well on unseen real-world cases. 80% training data ensures the model learns well without overfitting. 20% testing data provides sufficient examples to evaluate generalization performance. Stratified splitting maintains class proportions in both sets."],"metadata":{"id":"G06rUkMJVP6o"}},{"cell_type":"markdown","source":["NOTE -> we got points off last time for not splitting the data but we did split the data here, none of this code has changed."],"metadata":{"id":"N64fInJqaPsi"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler, OneHotEncoder\n","from sklearn.compose import ColumnTransformer\n","\n","# ## 1.3 Train-Test Split\n","# **Preprocessing: Encoding Categorical Features & Standardizing Numeric Features**\n","preprocessor = ColumnTransformer(\n","    transformers=[\n","        (\"num\", StandardScaler(), numeric_features),\n","        (\"cat\", OneHotEncoder(), categorical_features)\n","    ]\n",")\n","\n","X = df.drop(columns=[target_variable])\n","y = df[target_variable]\n","\n","X_preprocessed = preprocessor.fit_transform(X)\n","\n","# Split data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X_preprocessed, y, test_size=0.2, random_state=42, stratify=y)\n","\n","# **Justification for 80/20 Split**\n","# - 80% training data ensures the model learns well without overfitting.\n","# - 20% testing data provides sufficient examples to evaluate generalization performance.\n","# - Stratified splitting maintains class proportions in both sets.\n","# - Futhermore, we also tried a 90/10 split during testing and it did not improve accuracy\n","\n","print(\"\\nTraining Set Size:\", X_train.shape[0])\n","print(\"Test Set Size:\", X_test.shape[0])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WJmEfHcGUmuw","executionInfo":{"status":"ok","timestamp":1747001752703,"user_tz":300,"elapsed":1650,"user":{"displayName":"Cameron Tofani","userId":"01633329118435236785"}},"outputId":"c9255fb4-8ebf-4d57-e882-b568eff2a73c"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Training Set Size: 1688\n","Test Set Size: 423\n"]}]},{"cell_type":"markdown","source":["**Modeling (5 points total)**\n","The implementation of logistic regression must be written only from the examples given to you by the instructor. No credit will be assigned to teams that copy implementations from another source, regardless of if the code is properly cited.\n","\n","[2 points] Create a custom, one-versus-all logistic regression classifier using numpy and scipy to optimize. Use object oriented conventions identical to scikit-learn. You should start with the template developed by the instructor in the course. You should add the following functionality to the logistic regression classifier:\n","Ability to choose optimization technique when class is instantiated: either steepest ascent, stochastic gradient ascent, and Newton's method. It is recommended to call this the \"solver\" input for the class.\n","Update the gradient calculation to include a customizable regularization term (either using no regularization, L1 regularization, L2 regularization, or both L1 and L2 regularization). Associate a cost with the regularization term, \"C\", that can be adjusted when the class is instantiated.  \n","\n","\n","\n","-> To do this, we will first have a binary classifier, then use this to implement the one-verses-all logistic regression. Many cells of code here copied and pasted and the rest take inspo from: https://github.com/eclarson/MachineLearningNotebooks/blob/master/05.%20Logistic%20Regression.ipynb"],"metadata":{"id":"tiTvXwKCB17T"}},{"cell_type":"markdown","source":["ADDITION/CORRECTION:\n","\n","We used L2 regularization with the Newton solver in our custom logistic regression. This is important because the Hessian matrix, which is used to calculate second derivatives during optimization, is only compatible with L2 regularization. L1 regularization would require a different approach since it is not differentiable in the same way. Therefore, when using the Newton method, the penalty must be L2 by design."],"metadata":{"id":"37nWiacval-4"}},{"cell_type":"markdown","source":["Binary Logistic Regression:"],"metadata":{"id":"K8i8QEcpCH3Y"}},{"cell_type":"code","source":["import numpy as np\n","class BinaryLogisticRegressionBase:\n","  #change made here to allow for solver to be spesified\n","    # private:\n","    def __init__(self, eta, iterations=20, solver=None, C=0.0, penalty=\"none\"):\n","        self.eta = eta\n","        self.iters = iterations\n","        self.solver = solver\n","        self.C = C\n","        self.penalty = penalty\n","        # internally we will store the weights as self.w_ to keep with sklearn conventions\n","\n","    def __str__(self):\n","        return 'Base Binary Logistic Regression Object, Not Trainable'\n","\n","    # convenience, private and static:\n","    @staticmethod\n","    def _sigmoid(theta):\n","        return 1/(1+np.exp(-theta))\n","\n","    @staticmethod\n","    def _add_intercept(X):\n","        return np.hstack((np.ones((X.shape[0],1)),X)) # add bias term\n","\n","    # public:\n","    def predict_proba(self, X, add_intercept=True):\n","        # add bias term if requested\n","        Xb = self._add_intercept(X) if add_intercept else X\n","        return self._sigmoid(Xb @ self.w_) # return the probability y=1\n","\n","    def predict(self,X):\n","        return (self.predict_proba(X)>0.5) #return the actual prediction\n","\n","\n","\n","blr = BinaryLogisticRegressionBase(0.1)\n","print(blr)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aPiuHed--q8A","executionInfo":{"status":"ok","timestamp":1747001752704,"user_tz":300,"elapsed":4,"user":{"displayName":"Cameron Tofani","userId":"01633329118435236785"}},"outputId":"47ef8158-8650-4522-92b5-9dc25df76ccf"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Base Binary Logistic Regression Object, Not Trainable\n"]}]},{"cell_type":"code","source":["from numpy.linalg import pinv\n","\n","# inherit from base class\n","class BinaryLogisticRegression(BinaryLogisticRegressionBase):\n","    #private:\n","    def __str__(self):\n","        if(hasattr(self,'w_')):\n","            return 'Binary Logistic Regression Object with coefficients:\\n'+ str(self.w_) # is we have trained the object\n","        else:\n","            return 'Untrained Binary Logistic Regression Object'\n","\n","\n","    @property\n","    def coef_(self):\n","        if(hasattr(self,'w_')):\n","            return self.w_[1:]\n","        else:\n","            return None\n","\n","    @property\n","    def intercept_(self):\n","        if(hasattr(self,'w_')):\n","            return self.w_[0]\n","        else:\n","            return None\n","\n","    #adding to be able to apply regularization\n","    def _apply_regularization(self, gradient):\n","      if self.penalty == 'l2':\n","            gradient[1:] += -2 * self.w_[1:] * self.C\n","      elif self.penalty == 'l1':\n","            gradient[1:] += -self.C * np.sign(self.w_[1:])\n","      elif self.penalty == 'elasticnet':\n","            l1_ratio = 0.5\n","            gradient[1:] += -self.C * (l1_ratio * np.sign(self.w_[1:]) + (1 - l1_ratio) * 2 * self.w_[1:])\n","\n","      return gradient\n","\n","\n","    #note, ysing get gradient from larsons vectorized code to make this faster\n","    def _get_gradient(self,X,y):\n","        ydiff = y-self.predict_proba(X,add_intercept=False).ravel() # get y difference\n","        gradient = np.mean(X * ydiff[:,np.newaxis], axis=0) # make ydiff a column vector and multiply through\n","\n","        gradient = gradient.reshape(self.w_.shape)\n","        #apply regularization to gradient\n","        return self._apply_regularization(gradient)\n","\n","\n","    #CHANGES MADE HERE -> adding functions to be able to choose solver\n","    def _stochastic_gradient(self, X, y):\n","        mini_batch_size = 16\n","        idxs = np.random.choice(len(y), mini_batch_size)\n","\n","        ydiff = y[idxs]-self.predict_proba(X[idxs],add_intercept=False).ravel() # get y difference (now scalar)\n","        gradient = np.mean(X[idxs] * ydiff[:,np.newaxis], axis=0) # make ydiff a column vector and multiply through\n","\n","        #gradient[1:] += -2 * self.w_[1:] * self.C -> for regularization, not done here\n","\n","        return gradient.reshape(self.w_.shape)\n","\n","    def _newton_step(self, X, y):\n","      g = self.predict_proba(X,add_intercept=False).ravel() # get sigmoid value for all classes\n","      hessian = X.T @ np.diag(g*(1-g)) @ X - 2 * self.C # calculate the hessian\n","\n","      ydiff = y-g # get y difference\n","      gradient = np.sum(X * ydiff[:,np.newaxis], axis=0) # make ydiff a column vector and multiply through\n","      gradient = gradient.reshape(self.w_.shape)\n","      gradient[1:] += -2 * self.w_[1:] * self.C\n","\n","      return pinv(hessian) @ gradient\n","\n","    # public:\n","    def fit(self, X, y):\n","        Xb = self._add_intercept(X) # add bias term\n","        num_samples, num_features = Xb.shape\n","\n","        self.w_ = np.zeros((num_features,1)) # init weight vector to zeros\n","\n","        #CHANGES MADE HERE TO ALLOW FOR SOLVER\n","        if self.solver is None:\n","            raise ValueError(\"Solver must be specified (steepest_ascent, stochastic_gradient_ascent, or newton)\")\n","\n","        for _ in range(self.iters):\n","            if self.solver == \"steepest_ascent\":\n","                gradient = self._get_gradient(Xb, y)\n","                self.w_ += gradient * self.eta\n","\n","            elif self.solver == \"stochastic_gradient_ascent\":\n","                gradient = self._stochastic_gradient(Xb, y)\n","                self.w_ += gradient * self.eta\n","\n","            elif self.solver == \"newton\":\n","                step = self._newton_step(Xb, y)\n","                self.w_ += step\n","\n","            else:\n","                raise ValueError(f\"Unknown solver '{self.solver}'. Choose 'steepest_ascent', 'stochastic_gradient_ascent', or 'newton'.\")\n","\n","\n","blr = BinaryLogisticRegression(0.1)\n","print(blr)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aacYlX_LCPk0","executionInfo":{"status":"ok","timestamp":1747001752707,"user_tz":300,"elapsed":4,"user":{"displayName":"Cameron Tofani","userId":"01633329118435236785"}},"outputId":"f9bc2006-30c8-48f4-b586-23a1de5dcdcc"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Untrained Binary Logistic Regression Object\n"]}]},{"cell_type":"code","source":["class LogisticRegression:\n","    def __init__(self, eta, iterations=20,solver=None, C=0.0, penalty=\"none\"):\n","        self.eta = eta\n","        self.iters = iterations\n","        self.solver = solver\n","        self.C = C\n","        self.penalty = penalty\n","        # internally we will store the weights as self.w_ to keep with sklearn conventions\n","\n","    def __str__(self):\n","        if(hasattr(self,'w_')):\n","            return 'MultiClass Logistic Regression Object with coefficients:\\n'+ str(self.w_) # is we have trained the object\n","        else:\n","            return 'Untrained MultiClass Logistic Regression Object'\n","\n","    @property\n","    def coef_(self):\n","        if(hasattr(self,'w_')):\n","            return self.w_[:,1:]\n","        else:\n","            return None\n","\n","    @property\n","    def intercept_(self):\n","        if(hasattr(self,'w_')):\n","            return self.w_[:,0]\n","        else:\n","            return None\n","\n","    def fit(self,X,y):\n","        num_samples, num_features = X.shape\n","        self.unique_ = np.unique(y) # get each unique class value\n","        num_unique_classes = len(self.unique_)\n","        self.classifiers_ = [] # will fill this array with binary classifiers\n","\n","        for i,yval in enumerate(self.unique_): # for each unique value\n","            y_binary = (y==yval) # create a binary problem\n","            # train the binary classifier for this class\n","            #blr = VectorBinaryLogisticRegression(self.eta,\n","                                                 #self.iters)\n","            #changed this line^ to account for solver\n","            blr = BinaryLogisticRegression(eta=self.eta, iterations=self.iters, solver=self.solver, C=self.C,\n","                penalty=self.penalty)\n","            blr.fit(X,y_binary)\n","            # add the trained classifier to the list\n","            self.classifiers_.append(blr)\n","\n","        # save all the weights into one matrix, separate column for each class\n","        self.w_ = np.hstack([x.w_ for x in self.classifiers_]).T\n","\n","    def predict_proba(self,X, add_intercept=True):\n","\n","        probs = []\n","        for blr in self.classifiers_:\n","            probs.append(blr.predict_proba(X)) # get probability for each classifier\n","\n","        return np.hstack(probs) # make into single matrix\n","\n","\n","    def predict(self,X):\n","        return self.unique_[np.argmax(self.predict_proba(X),axis=1)] # take argmax along row"],"metadata":{"id":"RCBCdtRxCp_3","executionInfo":{"status":"ok","timestamp":1747001752708,"user_tz":300,"elapsed":1,"user":{"displayName":"Cameron Tofani","userId":"01633329118435236785"}}},"execution_count":12,"outputs":[]},{"cell_type":"markdown","source":["now we apply his code to our preprocessed dataset using the spesified solver and regularization"],"metadata":{"id":"k-cqwyS-FQ9C"}},{"cell_type":"code","source":["#debugging\n","y_train = np.array(y_train).ravel()\n","y_test = np.array(y_test).ravel()\n","\n","#default is steepest ascent with C = 0.0, next we will try different optimization techniques\n","lr = LogisticRegression(eta=0.1, iterations=500, solver=\"steepest_ascent\", C=0.00, penalty=\"l2\")\n","lr.fit(X_train, y_train)\n","\n","# Print accuracy\n","from sklearn.metrics import accuracy_score\n","yhat = lr.predict(X_test)\n","print('Accuracy of:', accuracy_score(y_test, yhat))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Wqi8gHsDfRzb","executionInfo":{"status":"ok","timestamp":1747001753047,"user_tz":300,"elapsed":339,"user":{"displayName":"Cameron Tofani","userId":"01633329118435236785"}},"outputId":"4e7aeeed-2ab5-4138-c316-630ff1784c5e"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy of: 0.8037825059101655\n"]}]},{"cell_type":"markdown","source":["**[1.5 points]** Train your classifier to achieve good generalization performance. That is, adjust the optimization technique and the value of the regularization term(s) \"C\" to achieve the best performance on your test set. Visualize the performance of the classifier versus the parameters you investigated.\n","Is your method of selecting parameters justified? That is, do you think there is any \"data snooping\" involved with this method of selecting parameters?"],"metadata":{"id":"g74ExsZDkpI3"}},{"cell_type":"code","source":["#testing with stochatic\n","lr = LogisticRegression(eta=0.1, iterations=500, solver=\"stochastic_gradient_ascent\", C=0.05, penalty=\"l2\")\n","lr.fit(X_train, y_train)\n","\n","# Print accuracy\n","from sklearn.metrics import accuracy_score\n","yhat = lr.predict(X_test)\n","print('Accuracy of:', accuracy_score(y_test, yhat))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4ydmMHc1iqoF","executionInfo":{"status":"ok","timestamp":1747001753216,"user_tz":300,"elapsed":170,"user":{"displayName":"Cameron Tofani","userId":"01633329118435236785"}},"outputId":"921a0cef-a91f-4bf5-c1b8-a5710ed58c9a"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy of: 0.7872340425531915\n"]}]},{"cell_type":"code","source":["import numpy as np\n","\n","# Define the solvers and C values to test\n","solvers = [\"steepest_ascent\", \"stochastic_gradient_ascent\", \"newton\"]\n","C_values = [0.001, 0.01, 0.05, 0.1, 0.5, 1.0, 10.0]\n","results = []\n","\n","\n","\n","from sklearn.metrics import accuracy_score\n","\n","# Iterate through each combination of solver and C\n","for solver in solvers:\n","    for C in C_values:\n","        # Initialize and train the model\n","        lr = LogisticRegression(\n","            eta=0.1,\n","            iterations=5,\n","            solver=solver,\n","            C=C,\n","            penalty=\"l2\"\n","        )\n","        lr.fit(X_train, y_train)\n","\n","        # Predict and evaluate accuracy\n","        yhat = lr.predict(X_test)\n","        acc = accuracy_score(y_test, yhat)\n","\n","        # Store the results\n","        results.append({'solver': solver, 'C': C, 'accuracy': acc})\n","\n","        print(f\"Solver: {solver}, C: {C}, Accuracy: {acc:.4f}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rlAdCpHvnNIq","executionInfo":{"status":"ok","timestamp":1747001755468,"user_tz":300,"elapsed":2255,"user":{"displayName":"Cameron Tofani","userId":"01633329118435236785"}},"outputId":"9bba8e9d-b332-46ae-fe63-6500fb5062f2"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["Solver: steepest_ascent, C: 0.001, Accuracy: 0.5485\n","Solver: steepest_ascent, C: 0.01, Accuracy: 0.5485\n","Solver: steepest_ascent, C: 0.05, Accuracy: 0.5485\n","Solver: steepest_ascent, C: 0.1, Accuracy: 0.5485\n","Solver: steepest_ascent, C: 0.5, Accuracy: 0.5461\n","Solver: steepest_ascent, C: 1.0, Accuracy: 0.5319\n","Solver: steepest_ascent, C: 10.0, Accuracy: 0.4610\n","Solver: stochastic_gradient_ascent, C: 0.001, Accuracy: 0.5768\n","Solver: stochastic_gradient_ascent, C: 0.01, Accuracy: 0.5934\n","Solver: stochastic_gradient_ascent, C: 0.05, Accuracy: 0.5461\n","Solver: stochastic_gradient_ascent, C: 0.1, Accuracy: 0.6028\n","Solver: stochastic_gradient_ascent, C: 0.5, Accuracy: 0.6170\n","Solver: stochastic_gradient_ascent, C: 1.0, Accuracy: 0.5130\n","Solver: stochastic_gradient_ascent, C: 10.0, Accuracy: 0.5319\n","Solver: newton, C: 0.001, Accuracy: 0.8605\n","Solver: newton, C: 0.01, Accuracy: 0.8582\n","Solver: newton, C: 0.05, Accuracy: 0.8582\n","Solver: newton, C: 0.1, Accuracy: 0.8534\n","Solver: newton, C: 0.5, Accuracy: 0.8369\n","Solver: newton, C: 1.0, Accuracy: 0.8156\n","Solver: newton, C: 10.0, Accuracy: 0.7045\n"]}]},{"cell_type":"code","source":["#visualization help from chatgpt.com\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","\n","# Convert results to a DataFrame for easy plotting\n","results_df = pd.DataFrame(results)\n","\n","# Plot accuracy vs C for each solver\n","plt.figure(figsize=(10, 6))\n","for solver in solvers:\n","    subset = results_df[results_df['solver'] == solver]\n","    plt.plot(subset['C'], subset['accuracy'], marker='o', label=f\"{solver}\")\n","\n","plt.xscale('log')  # Log scale for C\n","plt.xlabel(\"Regularization Parameter (C)\")\n","plt.ylabel(\"Accuracy\")\n","plt.title(\"Accuracy vs Regularization Parameter (C) for Different Solvers\")\n","plt.legend()\n","plt.grid(True)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":569},"id":"6awi4ykTu-Qe","executionInfo":{"status":"ok","timestamp":1747001756022,"user_tz":300,"elapsed":550,"user":{"displayName":"Cameron Tofani","userId":"01633329118435236785"}},"outputId":"110579e5-ad87-41bd-f1b1-6f709438adda"},"execution_count":16,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Is your method of selecting parameters justified? That is, do you think there is any \"data snooping\" involved with this method of selecting parameters?\n","\n","Answer: Our method of selecting parameters by evaluating accuracy on the test set provides valid insights but introduces a risk of data snooping. Ideally, the test set should be reserved strictly for final evaluation, while parameter tuning (adjusting the solver and C values) should be done using a separate validation set or through cross-validation. Using the test set for parameter selection can lead to overly optimistic performance results, as the model may be unintentionally optimized for that specific data. To avoid this, a more robust approach would involve tuning parameters on a validation set and only using the test set once for final model evaluation. However, this takes longer to run, especially with custom logistic regression code (since it’s less optimized than scikit-learn's functions). Thus, our method was justified because using a simple 80/20 split was a quicker, less resource-intensive approach that made more sense to use for this assignment."],"metadata":{"id":"nq-4UoW3vV90"}},{"cell_type":"markdown","source":["**[1.5 points]** Compare the performance of your \"best\" logistic regression optimization procedure to the procedure used in scikit-learn. Visualize the performance differences in terms of training time and classification performance. Discuss the results."],"metadata":{"id":"RkVQ7b9axQFH"}},{"cell_type":"code","source":["#our \"best\" logistic regression optimization procedure -- newton with c=.001\n","import time\n","from sklearn.metrics import accuracy_score\n","import numpy as np\n","\n","#custom logistic regression\n","start_time = time.time()\n","lr_custom = LogisticRegression(\n","    eta=0.1,\n","    iterations=5,\n","    solver=\"newton\",\n","    C=0.001,\n","    penalty=\"l2\"\n",")\n","lr_custom.fit(X_train, y_train)\n","custom_train_time = time.time() - start_time\n","\n","# Predict and evaluate\n","yhat_custom = lr_custom.predict(X_test)\n","custom_accuracy = accuracy_score(y_test, yhat_custom)\n","print(f\"Custom Model - Training Time: {custom_train_time:.4f}s, Accuracy: {custom_accuracy:.4f}\")\n","\n","\n","\n","\n","#comparing to scikit learn\n","from sklearn.linear_model import LogisticRegression as SKLogisticRegression\n","\n","start_time = time.time()\n","lr_sk = SKLogisticRegression(solver='liblinear') # all params default\n","\n","lr_sk.fit(X_train,y_train)\n","sk_train_time = time.time() - start_time\n","print(np.hstack((lr_sk.intercept_[:,np.newaxis],lr_sk.coef_)))\n","\n","# Predict and evaluate\n","yhat = lr_sk.predict(X_test)\n","sk_accuracy = accuracy_score(y_test,yhat)\n","print(f\"Scikit-learn Model - Training Time: {sk_train_time:.4f}s, Accuracy: {sk_accuracy:.4f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RCZoe3wExd2I","executionInfo":{"status":"ok","timestamp":1747001756381,"user_tz":300,"elapsed":360,"user":{"displayName":"Cameron Tofani","userId":"01633329118435236785"}},"outputId":"e173fc40-067c-402f-cddf-78af315cad0f"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Custom Model - Training Time: 0.3277s, Accuracy: 0.8605\n","[[-0.93580388 -0.01892843 -0.01089    -1.59803192 -0.10299232  0.03343638\n","   0.17646654 -0.94747416  0.01167028 -0.28816066 -0.64764322 -0.09786463\n","  -0.83793925]\n"," [-0.47251957 -0.07495516 -3.29930195  9.69459875 -0.15244614 -0.03399954\n","   0.25552912  0.29295709 -0.76547667 -0.53015019  0.05763062 -1.04350642\n","   0.57098684]\n"," [-0.49955075  0.30417417  0.15491688 -0.85916368 -0.2940798  -0.34434901\n","  -0.1169131  -0.52910398  0.02955324 -0.72979867  0.23024793  0.04589254\n","  -0.54544328]\n"," [-3.39239466 -0.24671229  1.99824607 -7.24124341  0.31165289  0.12085241\n","  -0.10137585 -1.29400769 -2.09838696 -1.59282604 -1.79956862 -1.75279365\n","  -1.639601  ]]\n","Scikit-learn Model - Training Time: 0.0188s, Accuracy: 0.8582\n"]}]},{"cell_type":"code","source":["#coding help for visualization from chatgpt.com\n","\n","import matplotlib.pyplot as plt\n","import numpy as np\n","\n","# Data for visualization\n","models = ['Custom (Newton, C=0.001)', 'Scikit-learn']\n","training_times = [custom_train_time, sk_train_time]\n","accuracies = [custom_accuracy, sk_accuracy]\n","\n","plt.figure(figsize=(12, 5))\n","\n","# Training Time Plot (Log Scale)\n","plt.subplot(1, 2, 1)\n","bars = plt.bar(models, training_times, color=['blue', 'orange'])\n","plt.ylabel(\"Training Time (seconds, log scale)\")\n","plt.title(\"Training Time Comparison (Log Scale)\")\n","plt.yscale('log')  # Log scale for big differences\n","\n","# Add data labels for clarity\n","for bar in bars:\n","    plt.text(bar.get_x() + bar.get_width() / 2, bar.get_height(),\n","             f'{bar.get_height():.4f}s', ha='center', va='bottom')\n","\n","# Accuracy Plot (Zoomed In)\n","plt.subplot(1, 2, 2)\n","bars = plt.bar(models, accuracies, color=['blue', 'orange'])\n","plt.ylabel(\"Accuracy\")\n","plt.title(\"Accuracy Comparison\")\n","plt.ylim(min(accuracies) * 0.99, max(accuracies) * 1.01)  # Focus on small differences\n","\n","# Add data labels for clarity\n","for bar in bars:\n","    plt.text(bar.get_x() + bar.get_width() / 2, bar.get_height(),\n","             f'{bar.get_height():.4f}', ha='center', va='bottom')\n","\n","plt.tight_layout()\n","plt.show()\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":507},"id":"K9offk7p1EPO","executionInfo":{"status":"ok","timestamp":1747001756769,"user_tz":300,"elapsed":389,"user":{"displayName":"Cameron Tofani","userId":"01633329118435236785"}},"outputId":"74e9dac8-9d67-4504-f523-eac3375f9112"},"execution_count":18,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x500 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["**Discuss the results:** The comparison between the custom logistic regression model (using Newton's method with C=0.001) and scikit-learn's implementation reveals notable differences in both training time and accuracy. The custom model achieved a slightly higher accuracy of 0.8605 compared to scikit-learn's 0.8582, indicating comparable classification performance. However, the training time for the custom model (0.3292 seconds) was significantly longer than scikit-learn's optimized model, which completed in just 0.0192 seconds. This large gap in training time, highlighted by the log-scaled visualization, demonstrates the efficiency differences between the two implementations."],"metadata":{"id":"S0ZLtF6F2JiI"}},{"cell_type":"markdown","source":["**Deployment (1 points total)**\n","Which implementation of logistic regression would you advise be used in a deployed machine learning model, your implementation or scikit-learn (or other third party implementation)? Why?\n","\n","Answer: For deployment, scikit-learn's logistic regression implementation is the better choice. Although the custom model achieved slightly higher accuracy, the difference was minimal (0.8605 vs. 0.8582), while the training time for the custom model was significantly longer. Scikit-learn’s highly optimized backend ensures faster computation, better scalability, and more reliable performance in real-world scenarios. Additionally, scikit-learn's model is easier to maintain, debug, and integrate into production pipelines. Therefore, scikit-learn's logistic regression provides the best balance of speed, efficiency, and accuracy for deployment.\n"],"metadata":{"id":"BPHl0ZiH26CD"}},{"cell_type":"markdown","source":["**Exceptional Work (1 points total)**\n","You have free reign to provide additional analyses. One idea: Update the code to use either \"one-versus-all\" or \"one-versus-one\" extensions of binary to multi-class classification.\n","\n","-> Our decision for exceptional work was to implement a One Vs One classifier, rather than a One VS All classifier. The difference between these methods is that One vs One (OVO) compares 2 spesific classes at a time, for example, overweight vs. obese, wherease OVA compares one class vs all the other classes, for example, overweight vs. not overweight. OVO will go through and compare each class against another, and return the class with the most \"votes\". OVA will go through and determine the level of confidence for each class, meaning how confident it is that someone is overweight vs not overweight. OVA will then return the class that has the highest confidence. A simple explanation that made it more clear to me went like this:\n","\n","**OVA:<br>**\n","apple vs not apple<br>\n","banana vs not banana<br>\n","orange vs not orange<br>\n","\n","**OVO:<br>**\n","apple vs orange<br>\n","apple vs banana<br>\n","banana vs orange<br>"],"metadata":{"id":"mqFEZk4mO-64"}},{"cell_type":"code","source":["import numpy as np\n","from itertools import combinations\n","\n","class OneVsOneLogisticRegression:\n","    def __init__(self, eta, iterations=20, solver=None, C=0.0, penalty=\"none\"):\n","        self.eta = eta\n","        self.iters = iterations\n","        self.solver = solver\n","        self.C = C\n","        self.penalty = penalty\n","        # internally we will store the weights as self.w_ to keep with sklearn conventions\n","\n","    def __str__(self):\n","        if hasattr(self, 'w_'):\n","            return 'MultiClass Logistic Regression Object with coefficients:\\n' + str(self.w_)  # if we have trained the object\n","        else:\n","            return 'Untrained MultiClass Logistic Regression Object'\n","\n","    @property\n","    def coef_(self):\n","        if hasattr(self, 'w_'):\n","            return self.w_[:, 1:]\n","        else:\n","            return None\n","\n","    @property\n","    def intercept_(self):\n","        if hasattr(self, 'w_'):\n","            return self.w_[:, 0]\n","        else:\n","            return None\n","\n","    def fit(self, X, y):\n","        num_samples, num_features = X.shape\n","        self.unique_ = np.unique(y)  # get each unique class value\n","        num_unique_classes = len(self.unique_)\n","\n","       #CHANGES MADE HERE FOR OVO\n","        self.models = []  #storing the binary classifiers\n","        self.class_pairs = []  #class pairs corresponding to each model\n","\n","        # CHANGES MADE HERE -> classifiers for every class pair instead of one-vs-all\n","        for class1, class2 in combinations(self.unique_, 2):  #all possible class pairs\n","            # creating the labels for 2 selected classes\n","            mask = (y == class1) | (y == class2)\n","            X_binary = X[mask]\n","            y_binary = (y[mask] == class2).astype(int)  # converting binary (0 for class1, 1 for class2)\n","\n","            # trinaing the binary classifier for this spesific class pair\n","            blr = BinaryLogisticRegression(\n","                eta=self.eta, iterations=self.iters, solver=self.solver, C=self.C, penalty=self.penalty\n","            )\n","            blr.fit(X_binary, y_binary)\n","\n","            # storing the trained model and its class pair\n","            self.models.append(blr)\n","            self.class_pairs.append((class1, class2))\n","\n","        # saving all the weights in one matrix\n","        self.w_ = np.vstack([model.w_.flatten() for model in self.models])\n","\n","    def predict_proba(self, X, add_intercept=True):\n","        \"\"\"\n","        Returns the probability predictions from each binary classifier.\n","        Since OvO has multiple classifiers, the final probability is not straightforward.\n","        \"\"\"\n","        probs = []\n","        for model in self.models:\n","            probs.append(model.predict_proba(X))  #probability for each binary classifier\n","        return np.hstack(probs)  # combining into a single matrix\n","\n","    def predict(self, X):\n","        \"\"\"\n","        Predicts the class using a voting scheme:\n","        - Each binary classifier predicts its assigned two-class problem.\n","        - The class with the most votes is chosen as the final prediction.\n","        \"\"\"\n","\n","        # CHANGES MADE HERE -> majority voting instead of selecting highest probability\n","        votes = {cls: np.zeros(X.shape[0]) for cls in self.unique_}\n","\n","        #predictions from each binary model\n","        for model, (class1, class2) in zip(self.models, self.class_pairs):\n","            binary_predictions = model.predict(X)  # predicting either 0 or 1\n","            for i, pred in enumerate(binary_predictions):\n","                if pred == 0:\n","                    votes[class1][i] += 1\n","                else:\n","                    votes[class2][i] += 1\n","\n","        # return the final predicitons\n","        final_predictions = np.array([max(votes, key=lambda cls: votes[cls][i]) for i in range(X.shape[0])])\n","        return final_predictions\n"],"metadata":{"id":"mIVSXgYwO-el","executionInfo":{"status":"ok","timestamp":1747001756770,"user_tz":300,"elapsed":1,"user":{"displayName":"Cameron Tofani","userId":"01633329118435236785"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["ovo_lr = OneVsOneLogisticRegression(eta=0.1, iterations=500, solver=\"steepest_ascent\", C=0.00, penalty=\"l2\")\n","ovo_lr.fit(X_train, y_train)\n","\n","yhat_ovo = ovo_lr.predict(X_test)\n","\n","from sklearn.metrics import accuracy_score\n","print(\"One-Versus-One Accuracy:\", accuracy_score(y_test, yhat_ovo))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Zs3-sJ4hQsz9","executionInfo":{"status":"ok","timestamp":1747001757129,"user_tz":300,"elapsed":358,"user":{"displayName":"Cameron Tofani","userId":"01633329118435236785"}},"outputId":"639cf2c5-6d66-4f2d-f8b4-df57bd961003"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["One-Versus-One Accuracy: 0.8983451536643026\n"]}]},{"cell_type":"markdown","source":["**Explanation:** Our classifier performed better when using One vs One accuracy. This is likely because OVO trains using only 2 classes at a time, meaning it will be easier for it to spot subtle differences, perhaps between classes like obese vs overweight. Furthermore, we spoke in class about how OVA has imbalance issues, meaning the model may be bias for prediciting the majority class. For example, lets look at the distribution of classes in our dataset.\n","\n"," **Class Distribution:<br>\n","obesity_level<br>\n","Obese          972<br>\n","Overweight     580<br>\n","Normal         287<br>\n","Underweight    272<br>**\n","\n","Looking at this distribution, we see that there are many more people labeled \"obsese\" than there are \"underweight\". This means that when OVA is doing underweight vs not underweight, there will be many more samples in not underweight. It might be bias and predict as not underweight simply because it is more likely that the sample is not underweight. This might cause it to incorrectly classify samples that are actually underweight.\n","\n","On the other hand, OVO looks individually at classes, comparing one class vs. another class rather than all at once. This means that instead of \"Underweight vs. Everything Else,\" it will do \"Underweight vs. Normal\" or \"Underweight vs. Overweight\", where class sizes are more balanced. This makes it less biased and better at distinguishing between different categories, leading to higher accuracy."],"metadata":{"id":"mbCgEMvVWA-Q"}},{"cell_type":"code","source":["!ls \"/content/drive/My Drive/Colab Notebooks/ML//ML_LAB3/\""],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oBjTyVgYPGrT","executionInfo":{"status":"ok","timestamp":1747001768642,"user_tz":300,"elapsed":106,"user":{"displayName":"Cameron Tofani","userId":"01633329118435236785"}},"outputId":"91aefc82-2bb0-46a6-bb68-7ed6cc788262"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["3Logistic_Regression.html   ObesityDataSet_raw_and_data_sinthetic.csv\n","3Logistic_Regression.ipynb\n"]}]},{"cell_type":"code","source":["!jupyter nbconvert --to html \"/content/drive/My Drive/Colab Notebooks/ML/ML_LAB3/3Logistic_Regression.ipynb\""],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i5sHL77qN0Bf","executionInfo":{"status":"ok","timestamp":1747001778783,"user_tz":300,"elapsed":3640,"user":{"displayName":"Cameron Tofani","userId":"01633329118435236785"}},"outputId":"df12b99f-08d2-4f2c-e3e8-fb43fbd3c609"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["[NbConvertApp] Converting notebook /content/drive/My Drive/Colab Notebooks/ML/ML_LAB3/3Logistic_Regression.ipynb to html\n","[NbConvertApp] Writing 394648 bytes to /content/drive/My Drive/Colab Notebooks/ML/ML_LAB3/3Logistic_Regression.html\n"]}]},{"cell_type":"code","source":["from google.colab import files\n","files.download(\"/content/drive/My Drive/Colab Notebooks/ML/ML_LAB3/3Logistic_Regression.html\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"bTHLVje4Pgag","executionInfo":{"status":"ok","timestamp":1747001783049,"user_tz":300,"elapsed":5,"user":{"displayName":"Cameron Tofani","userId":"01633329118435236785"}},"outputId":"b73f413a-5184-499a-d582-e8d01690fc2a"},"execution_count":26,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_420be3c3-2c56-4fb8-9ea1-de1ae4657349\", \"3Logistic_Regression.html\", 394731)"]},"metadata":{}}]}]}